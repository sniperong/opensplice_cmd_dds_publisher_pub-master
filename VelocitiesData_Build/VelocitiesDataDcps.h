//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: VelocitiesDataDcps.h
//  Source: VelocitiesData_Build/VelocitiesDataDcps.idl
//  Generated: Tue Oct 31 12:03:13 2017
//  OpenSplice 6.8.2
//  
//******************************************************************
#ifndef _VELOCITIESDATADCPS_H_
#define _VELOCITIESDATADCPS_H_

#include "sacpp_mapping.h"
#include "dds_dcps.h"
#include "VelocitiesData.h"


namespace VelocitiesData
{

   class VelocitiesTypeSupportInterface;

   typedef VelocitiesTypeSupportInterface * VelocitiesTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < VelocitiesTypeSupportInterface> VelocitiesTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < VelocitiesTypeSupportInterface> VelocitiesTypeSupportInterface_out;


   class VelocitiesDataWriter;

   typedef VelocitiesDataWriter * VelocitiesDataWriter_ptr;
   typedef DDS_DCPSInterface_var < VelocitiesDataWriter> VelocitiesDataWriter_var;
   typedef DDS_DCPSInterface_out < VelocitiesDataWriter> VelocitiesDataWriter_out;


   class VelocitiesDataReader;

   typedef VelocitiesDataReader * VelocitiesDataReader_ptr;
   typedef DDS_DCPSInterface_var < VelocitiesDataReader> VelocitiesDataReader_var;
   typedef DDS_DCPSInterface_out < VelocitiesDataReader> VelocitiesDataReader_out;


   class VelocitiesDataReaderView;

   typedef VelocitiesDataReaderView * VelocitiesDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < VelocitiesDataReaderView> VelocitiesDataReaderView_var;
   typedef DDS_DCPSInterface_out < VelocitiesDataReaderView> VelocitiesDataReaderView_out;

   struct VelocitiesSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < Velocities, struct VelocitiesSeq_uniq_> VelocitiesSeq;
   typedef DDS_DCPSSequence_var < VelocitiesSeq> VelocitiesSeq_var;
   typedef DDS_DCPSSequence_out < VelocitiesSeq> VelocitiesSeq_out;
   class VelocitiesTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef VelocitiesTypeSupportInterface_ptr _ptr_type;
      typedef VelocitiesTypeSupportInterface_var _var_type;

      static VelocitiesTypeSupportInterface_ptr _duplicate (VelocitiesTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static VelocitiesTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static VelocitiesTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static VelocitiesTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      VelocitiesTypeSupportInterface_ptr _this () { return this; }


   protected:
      VelocitiesTypeSupportInterface () {};
      ~VelocitiesTypeSupportInterface () {};
   private:
      VelocitiesTypeSupportInterface (const VelocitiesTypeSupportInterface &);
      VelocitiesTypeSupportInterface & operator = (const VelocitiesTypeSupportInterface &);
   };

   class VelocitiesDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef VelocitiesDataWriter_ptr _ptr_type;
      typedef VelocitiesDataWriter_var _var_type;

      static VelocitiesDataWriter_ptr _duplicate (VelocitiesDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static VelocitiesDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static VelocitiesDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static VelocitiesDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      VelocitiesDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Velocities& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Velocities& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Velocities& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Velocities& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Velocities& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Velocities& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Velocities& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Velocities& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Velocities& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Velocities& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Velocities& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Velocities& instance_data) = 0;

   protected:
      VelocitiesDataWriter () {};
      ~VelocitiesDataWriter () {};
   private:
      VelocitiesDataWriter (const VelocitiesDataWriter &);
      VelocitiesDataWriter & operator = (const VelocitiesDataWriter &);
   };

   class VelocitiesDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef VelocitiesDataReader_ptr _ptr_type;
      typedef VelocitiesDataReader_var _var_type;

      static VelocitiesDataReader_ptr _duplicate (VelocitiesDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static VelocitiesDataReader_ptr _narrow (DDS::Object_ptr obj);
      static VelocitiesDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static VelocitiesDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      VelocitiesDataReader_ptr _this () { return this; }

      virtual DDS::Long read (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Velocities& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Velocities& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Velocities& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Velocities& instance) = 0;

   protected:
      VelocitiesDataReader () {};
      ~VelocitiesDataReader () {};
   private:
      VelocitiesDataReader (const VelocitiesDataReader &);
      VelocitiesDataReader & operator = (const VelocitiesDataReader &);
   };

   class VelocitiesDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef VelocitiesDataReaderView_ptr _ptr_type;
      typedef VelocitiesDataReaderView_var _var_type;

      static VelocitiesDataReaderView_ptr _duplicate (VelocitiesDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static VelocitiesDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static VelocitiesDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static VelocitiesDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      VelocitiesDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Velocities& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Velocities& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (VelocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Velocities& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Velocities& instance) = 0;

   protected:
      VelocitiesDataReaderView () {};
      ~VelocitiesDataReaderView () {};
   private:
      VelocitiesDataReaderView (const VelocitiesDataReaderView &);
      VelocitiesDataReaderView & operator = (const VelocitiesDataReaderView &);
   };

}




#endif

//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: ContentFilteredTopicDataDcps.h
//  Source: ContentFilteredTopicDataDcps.idl
//  Generated: Mon Oct 23 17:11:30 2017
//  OpenSplice 6.8.2
//  
//******************************************************************
#ifndef _CONTENTFILTEREDTOPICDATADCPS_H_
#define _CONTENTFILTEREDTOPICDATADCPS_H_

#include "sacpp_mapping.h"
#include "ContentFilteredTopicData.h"
#include "dds_dcps.h"


namespace StockMarket
{

   class StockTypeSupportInterface;

   typedef StockTypeSupportInterface * StockTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < StockTypeSupportInterface> StockTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < StockTypeSupportInterface> StockTypeSupportInterface_out;


   class StockDataWriter;

   typedef StockDataWriter * StockDataWriter_ptr;
   typedef DDS_DCPSInterface_var < StockDataWriter> StockDataWriter_var;
   typedef DDS_DCPSInterface_out < StockDataWriter> StockDataWriter_out;


   class StockDataReader;

   typedef StockDataReader * StockDataReader_ptr;
   typedef DDS_DCPSInterface_var < StockDataReader> StockDataReader_var;
   typedef DDS_DCPSInterface_out < StockDataReader> StockDataReader_out;


   class StockDataReaderView;

   typedef StockDataReaderView * StockDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < StockDataReaderView> StockDataReaderView_var;
   typedef DDS_DCPSInterface_out < StockDataReaderView> StockDataReaderView_out;

   struct StockSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Stock, struct StockSeq_uniq_> StockSeq;
   typedef DDS_DCPSSequence_var < StockSeq> StockSeq_var;
   typedef DDS_DCPSSequence_out < StockSeq> StockSeq_out;
   class StockTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef StockTypeSupportInterface_ptr _ptr_type;
      typedef StockTypeSupportInterface_var _var_type;

      static StockTypeSupportInterface_ptr _duplicate (StockTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static StockTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static StockTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static StockTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      StockTypeSupportInterface_ptr _this () { return this; }


   protected:
      StockTypeSupportInterface () {};
      ~StockTypeSupportInterface () {};
   private:
      StockTypeSupportInterface (const StockTypeSupportInterface &);
      StockTypeSupportInterface & operator = (const StockTypeSupportInterface &);
   };

   class StockDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef StockDataWriter_ptr _ptr_type;
      typedef StockDataWriter_var _var_type;

      static StockDataWriter_ptr _duplicate (StockDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static StockDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static StockDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static StockDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      StockDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Stock& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Stock& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Stock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Stock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Stock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Stock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Stock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Stock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Stock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Stock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Stock& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Stock& instance_data) = 0;

   protected:
      StockDataWriter () {};
      ~StockDataWriter () {};
   private:
      StockDataWriter (const StockDataWriter &);
      StockDataWriter & operator = (const StockDataWriter &);
   };

   class StockDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef StockDataReader_ptr _ptr_type;
      typedef StockDataReader_var _var_type;

      static StockDataReader_ptr _duplicate (StockDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static StockDataReader_ptr _narrow (DDS::Object_ptr obj);
      static StockDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static StockDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      StockDataReader_ptr _this () { return this; }

      virtual DDS::Long read (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Stock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Stock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (StockSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Stock& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Stock& instance) = 0;

   protected:
      StockDataReader () {};
      ~StockDataReader () {};
   private:
      StockDataReader (const StockDataReader &);
      StockDataReader & operator = (const StockDataReader &);
   };

   class StockDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef StockDataReaderView_ptr _ptr_type;
      typedef StockDataReaderView_var _var_type;

      static StockDataReaderView_ptr _duplicate (StockDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static StockDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static StockDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static StockDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      StockDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Stock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Stock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (StockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (StockSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Stock& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Stock& instance) = 0;

   protected:
      StockDataReaderView () {};
      ~StockDataReaderView () {};
   private:
      StockDataReaderView (const StockDataReaderView &);
      StockDataReaderView & operator = (const StockDataReaderView &);
   };

}




#endif

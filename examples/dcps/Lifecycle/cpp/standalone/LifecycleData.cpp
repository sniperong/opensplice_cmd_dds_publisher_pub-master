//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: LifecycleData.cpp
//  Source: ../../idl/LifecycleData.idl
//  Generated: Mon Oct 23 17:12:13 2017
//  OpenSplice 6.8.2
//  
//******************************************************************

#include "LifecycleData.h"


#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPS_VArray_var< LifecycleData::writerState_t, LifecycleData::writerState_t_slice, struct LifecycleData::writerState_t_uniq_>;
template class DDS_DCPS_Array_forany< LifecycleData::writerState_t, LifecycleData::writerState_t_slice, struct LifecycleData::writerState_t_uniq_>;
template class DDS_DCPS_VLArray_out < LifecycleData::writerState_t, LifecycleData::writerState_t_slice, LifecycleData::writerState_t_var, LifecycleData::writerState_t_uniq_>;
#endif

template <>
LifecycleData::writerState_t_slice* DDS_DCPS_ArrayHelper < LifecycleData::writerState_t, LifecycleData::writerState_t_slice, LifecycleData::writerState_t_uniq_>::alloc ()
{
   return LifecycleData::writerState_t_alloc ();
}

template <>
void DDS_DCPS_ArrayHelper < LifecycleData::writerState_t, LifecycleData::writerState_t_slice, LifecycleData::writerState_t_uniq_>::copy (LifecycleData::writerState_t_slice *to, const LifecycleData::writerState_t_slice* from)
{
   LifecycleData::writerState_t_copy (to, from);
}

template <>
void DDS_DCPS_ArrayHelper < LifecycleData::writerState_t, LifecycleData::writerState_t_slice, LifecycleData::writerState_t_uniq_>::free (LifecycleData::writerState_t_slice *ptr)
{
   LifecycleData::writerState_t_free (ptr);
}

LifecycleData::writerState_t_slice * LifecycleData::writerState_t_alloc ()
{
   DDS::String_mgr * ret = (DDS::String_mgr*) new DDS::String_mgr [10];
   for (DDS::ULong i = 0; i < 10; i++)
   {
      ret[i] = (DDS::String) 0;
   }
   return (writerState_t_slice *) ret;
}

void LifecycleData::writerState_t_free (writerState_t_slice * s)
{
   if (s)
   {
      DDS::String_mgr * base = (DDS::String_mgr*) s;
      for (DDS::ULong i = 0; i < 10; i++)
      {
         base[i] = (DDS::String) 0;
      }
   }
   delete [] s;
}

void LifecycleData::writerState_t_copy
(
   writerState_t_slice * to,
   const writerState_t_slice * from
)
{
   const DDS::String_mgr* sv = ( const DDS::String_mgr*) from;
   DDS::String_mgr* tv = (DDS::String_mgr*) to;
   for (DDS::ULong i = 0; i < 10; i++) tv[i] = DDS::string_dup (sv[i]);
}

LifecycleData::writerState_t_slice * LifecycleData::writerState_t_dup
   (const writerState_t_slice * from)
{
   writerState_t_slice * to = writerState_t_alloc ();
   writerState_t_copy (to, from);
   return to;
}





//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: pingpong.h
//  Source: ../../idl/pingpong.idl
//  Generated: Mon Oct 23 17:11:01 2017
//  OpenSplice 6.8.2
//  
//******************************************************************
#ifndef _PINGPONG_H_
#define _PINGPONG_H_

#include "sacpp_mapping.h"


namespace pingpong
{
   struct PP_min_msg;
   struct PP_seq_msg;
   struct PP_string_msg;
   struct PP_fixed_msg;
   struct PP_array_msg;
   struct PP_bseq_msg;
   struct PP_quit_msg;

   struct PP_min_msg
   {
         DDS::ULong block;
         DDS::ULong count;
   };

   typedef DDS_DCPSStruct_var < PP_min_msg> PP_min_msg_var;
   typedef PP_min_msg&PP_min_msg_out;
   struct seq_char_uniq_ {};
   typedef DDS_DCPSUFLSeq < DDS::Char, struct seq_char_uniq_> seq_char;
   typedef DDS_DCPSSequence_var < seq_char> seq_char_var;
   typedef DDS_DCPSSequence_out < seq_char> seq_char_out;

   struct PP_seq_msg
   {
         DDS::ULong block;
         DDS::ULong count;
         seq_char payload;
   };

   typedef DDS_DCPSStruct_var < PP_seq_msg> PP_seq_msg_var;
   typedef DDS_DCPSStruct_out < PP_seq_msg> PP_seq_msg_out;

   struct PP_string_msg
   {
         DDS::ULong block;
         DDS::ULong count;
         DDS::String_mgr a_string;
   };

   typedef DDS_DCPSStruct_var < PP_string_msg> PP_string_msg_var;
   typedef DDS_DCPSStruct_out < PP_string_msg> PP_string_msg_out;
   typedef DDS::Char* string_40;
   typedef DDS::String_var string_40_var;
   typedef DDS::String_out string_40_out;

   struct PP_fixed_msg
   {
         DDS::ULong block;
         DDS::ULong count;
         DDS::Char a_char;
         DDS::Octet a_octet;
         DDS::Short a_short;
         DDS::UShort a_ushort;
         DDS::Long a_long;
         DDS::ULong a_ulong;
         DDS::LongLong a_longlong;
         DDS::ULongLong a_ulonglong;
         DDS::Float a_float;
         DDS::Double a_double;
         DDS::Boolean a_boolean;
         DDS::String_mgr a_bstring;
   };

   typedef DDS_DCPSStruct_var < PP_fixed_msg> PP_fixed_msg_var;
   typedef DDS_DCPSStruct_out < PP_fixed_msg> PP_fixed_msg_out;

   struct PP_array_msg
   {
         typedef DDS::Char _str_arr_char_slice;
         typedef DDS::Char _str_arr_char[10];
         typedef _str_arr_char _str_arr_char_out;
         static _str_arr_char_slice * _str_arr_char_alloc ();
         static void _str_arr_char_free (_str_arr_char_slice *);
         static void _str_arr_char_copy (_str_arr_char_slice* to, const _str_arr_char_slice* from);
         static _str_arr_char_slice *_str_arr_char_dup (const _str_arr_char_slice* from);

         struct _str_arr_char_uniq_ {};
         typedef DDS_DCPS_FArray_var< _str_arr_char, _str_arr_char_slice, struct _str_arr_char_uniq_> _str_arr_char_var;
         typedef DDS_DCPS_Array_forany< _str_arr_char, _str_arr_char_slice, struct _str_arr_char_uniq_> _str_arr_char_forany;
         typedef DDS::Octet _str_arr_octet_slice;
         typedef DDS::Octet _str_arr_octet[10];
         typedef _str_arr_octet _str_arr_octet_out;
         static _str_arr_octet_slice * _str_arr_octet_alloc ();
         static void _str_arr_octet_free (_str_arr_octet_slice *);
         static void _str_arr_octet_copy (_str_arr_octet_slice* to, const _str_arr_octet_slice* from);
         static _str_arr_octet_slice *_str_arr_octet_dup (const _str_arr_octet_slice* from);

         struct _str_arr_octet_uniq_ {};
         typedef DDS_DCPS_FArray_var< _str_arr_octet, _str_arr_octet_slice, struct _str_arr_octet_uniq_> _str_arr_octet_var;
         typedef DDS_DCPS_Array_forany< _str_arr_octet, _str_arr_octet_slice, struct _str_arr_octet_uniq_> _str_arr_octet_forany;
         typedef DDS::Short _str_arr_short_slice;
         typedef DDS::Short _str_arr_short[10];
         typedef _str_arr_short _str_arr_short_out;
         static _str_arr_short_slice * _str_arr_short_alloc ();
         static void _str_arr_short_free (_str_arr_short_slice *);
         static void _str_arr_short_copy (_str_arr_short_slice* to, const _str_arr_short_slice* from);
         static _str_arr_short_slice *_str_arr_short_dup (const _str_arr_short_slice* from);

         struct _str_arr_short_uniq_ {};
         typedef DDS_DCPS_FArray_var< _str_arr_short, _str_arr_short_slice, struct _str_arr_short_uniq_> _str_arr_short_var;
         typedef DDS_DCPS_Array_forany< _str_arr_short, _str_arr_short_slice, struct _str_arr_short_uniq_> _str_arr_short_forany;
         typedef DDS::UShort _str_arr_ushort_slice;
         typedef DDS::UShort _str_arr_ushort[10];
         typedef _str_arr_ushort _str_arr_ushort_out;
         static _str_arr_ushort_slice * _str_arr_ushort_alloc ();
         static void _str_arr_ushort_free (_str_arr_ushort_slice *);
         static void _str_arr_ushort_copy (_str_arr_ushort_slice* to, const _str_arr_ushort_slice* from);
         static _str_arr_ushort_slice *_str_arr_ushort_dup (const _str_arr_ushort_slice* from);

         struct _str_arr_ushort_uniq_ {};
         typedef DDS_DCPS_FArray_var< _str_arr_ushort, _str_arr_ushort_slice, struct _str_arr_ushort_uniq_> _str_arr_ushort_var;
         typedef DDS_DCPS_Array_forany< _str_arr_ushort, _str_arr_ushort_slice, struct _str_arr_ushort_uniq_> _str_arr_ushort_forany;
         typedef DDS::Long _str_arr_long_slice;
         typedef DDS::Long _str_arr_long[10];
         typedef _str_arr_long _str_arr_long_out;
         static _str_arr_long_slice * _str_arr_long_alloc ();
         static void _str_arr_long_free (_str_arr_long_slice *);
         static void _str_arr_long_copy (_str_arr_long_slice* to, const _str_arr_long_slice* from);
         static _str_arr_long_slice *_str_arr_long_dup (const _str_arr_long_slice* from);

         struct _str_arr_long_uniq_ {};
         typedef DDS_DCPS_FArray_var< _str_arr_long, _str_arr_long_slice, struct _str_arr_long_uniq_> _str_arr_long_var;
         typedef DDS_DCPS_Array_forany< _str_arr_long, _str_arr_long_slice, struct _str_arr_long_uniq_> _str_arr_long_forany;
         typedef DDS::ULong _str_arr_ulong_slice;
         typedef DDS::ULong _str_arr_ulong[10];
         typedef _str_arr_ulong _str_arr_ulong_out;
         static _str_arr_ulong_slice * _str_arr_ulong_alloc ();
         static void _str_arr_ulong_free (_str_arr_ulong_slice *);
         static void _str_arr_ulong_copy (_str_arr_ulong_slice* to, const _str_arr_ulong_slice* from);
         static _str_arr_ulong_slice *_str_arr_ulong_dup (const _str_arr_ulong_slice* from);

         struct _str_arr_ulong_uniq_ {};
         typedef DDS_DCPS_FArray_var< _str_arr_ulong, _str_arr_ulong_slice, struct _str_arr_ulong_uniq_> _str_arr_ulong_var;
         typedef DDS_DCPS_Array_forany< _str_arr_ulong, _str_arr_ulong_slice, struct _str_arr_ulong_uniq_> _str_arr_ulong_forany;
         typedef DDS::LongLong _str_arr_longlong_slice;
         typedef DDS::LongLong _str_arr_longlong[10];
         typedef _str_arr_longlong _str_arr_longlong_out;
         static _str_arr_longlong_slice * _str_arr_longlong_alloc ();
         static void _str_arr_longlong_free (_str_arr_longlong_slice *);
         static void _str_arr_longlong_copy (_str_arr_longlong_slice* to, const _str_arr_longlong_slice* from);
         static _str_arr_longlong_slice *_str_arr_longlong_dup (const _str_arr_longlong_slice* from);

         struct _str_arr_longlong_uniq_ {};
         typedef DDS_DCPS_FArray_var< _str_arr_longlong, _str_arr_longlong_slice, struct _str_arr_longlong_uniq_> _str_arr_longlong_var;
         typedef DDS_DCPS_Array_forany< _str_arr_longlong, _str_arr_longlong_slice, struct _str_arr_longlong_uniq_> _str_arr_longlong_forany;
         typedef DDS::ULongLong _str_arr_ulonglong_slice;
         typedef DDS::ULongLong _str_arr_ulonglong[10];
         typedef _str_arr_ulonglong _str_arr_ulonglong_out;
         static _str_arr_ulonglong_slice * _str_arr_ulonglong_alloc ();
         static void _str_arr_ulonglong_free (_str_arr_ulonglong_slice *);
         static void _str_arr_ulonglong_copy (_str_arr_ulonglong_slice* to, const _str_arr_ulonglong_slice* from);
         static _str_arr_ulonglong_slice *_str_arr_ulonglong_dup (const _str_arr_ulonglong_slice* from);

         struct _str_arr_ulonglong_uniq_ {};
         typedef DDS_DCPS_FArray_var< _str_arr_ulonglong, _str_arr_ulonglong_slice, struct _str_arr_ulonglong_uniq_> _str_arr_ulonglong_var;
         typedef DDS_DCPS_Array_forany< _str_arr_ulonglong, _str_arr_ulonglong_slice, struct _str_arr_ulonglong_uniq_> _str_arr_ulonglong_forany;
         typedef DDS::Float _str_arr_float_slice;
         typedef DDS::Float _str_arr_float[10];
         typedef _str_arr_float _str_arr_float_out;
         static _str_arr_float_slice * _str_arr_float_alloc ();
         static void _str_arr_float_free (_str_arr_float_slice *);
         static void _str_arr_float_copy (_str_arr_float_slice* to, const _str_arr_float_slice* from);
         static _str_arr_float_slice *_str_arr_float_dup (const _str_arr_float_slice* from);

         struct _str_arr_float_uniq_ {};
         typedef DDS_DCPS_FArray_var< _str_arr_float, _str_arr_float_slice, struct _str_arr_float_uniq_> _str_arr_float_var;
         typedef DDS_DCPS_Array_forany< _str_arr_float, _str_arr_float_slice, struct _str_arr_float_uniq_> _str_arr_float_forany;
         typedef DDS::Double _str_arr_double_slice;
         typedef DDS::Double _str_arr_double[10];
         typedef _str_arr_double _str_arr_double_out;
         static _str_arr_double_slice * _str_arr_double_alloc ();
         static void _str_arr_double_free (_str_arr_double_slice *);
         static void _str_arr_double_copy (_str_arr_double_slice* to, const _str_arr_double_slice* from);
         static _str_arr_double_slice *_str_arr_double_dup (const _str_arr_double_slice* from);

         struct _str_arr_double_uniq_ {};
         typedef DDS_DCPS_FArray_var< _str_arr_double, _str_arr_double_slice, struct _str_arr_double_uniq_> _str_arr_double_var;
         typedef DDS_DCPS_Array_forany< _str_arr_double, _str_arr_double_slice, struct _str_arr_double_uniq_> _str_arr_double_forany;
         typedef DDS::Boolean _str_arr_boolean_slice;
         typedef DDS::Boolean _str_arr_boolean[11];
         typedef _str_arr_boolean _str_arr_boolean_out;
         static _str_arr_boolean_slice * _str_arr_boolean_alloc ();
         static void _str_arr_boolean_free (_str_arr_boolean_slice *);
         static void _str_arr_boolean_copy (_str_arr_boolean_slice* to, const _str_arr_boolean_slice* from);
         static _str_arr_boolean_slice *_str_arr_boolean_dup (const _str_arr_boolean_slice* from);

         struct _str_arr_boolean_uniq_ {};
         typedef DDS_DCPS_FArray_var< _str_arr_boolean, _str_arr_boolean_slice, struct _str_arr_boolean_uniq_> _str_arr_boolean_var;
         typedef DDS_DCPS_Array_forany< _str_arr_boolean, _str_arr_boolean_slice, struct _str_arr_boolean_uniq_> _str_arr_boolean_forany;
         DDS::ULong block;
         DDS::ULong count;
         _str_arr_char str_arr_char;
         _str_arr_octet str_arr_octet;
         _str_arr_short str_arr_short;
         _str_arr_ushort str_arr_ushort;
         _str_arr_long str_arr_long;
         _str_arr_ulong str_arr_ulong;
         _str_arr_longlong str_arr_longlong;
         _str_arr_ulonglong str_arr_ulonglong;
         _str_arr_float str_arr_float;
         _str_arr_double str_arr_double;
         _str_arr_boolean str_arr_boolean;
   };

   typedef DDS_DCPSStruct_var < PP_array_msg> PP_array_msg_var;
   typedef PP_array_msg&PP_array_msg_out;

   struct PP_bseq_msg
   {
         struct _seq_char_seq_uniq_ {};
         typedef DDS_DCPSBFLSeq < DDS::Char, DDS::Char, 10> _seq_char_seq;
         typedef DDS_DCPSSequence_var < _seq_char_seq> _seq_char_seq_var;
         typedef DDS_DCPSSequence_out < _seq_char_seq> _seq_char_seq_out;
         struct _seq_octets_seq_uniq_ {};
         typedef DDS_DCPSBFLSeq < DDS::Octet, DDS::Octet, 10> _seq_octets_seq;
         typedef DDS_DCPSSequence_var < _seq_octets_seq> _seq_octets_seq_var;
         typedef DDS_DCPSSequence_out < _seq_octets_seq> _seq_octets_seq_out;
         struct _seq_short_seq_uniq_ {};
         typedef DDS_DCPSBFLSeq < DDS::Short, DDS::Short, 10> _seq_short_seq;
         typedef DDS_DCPSSequence_var < _seq_short_seq> _seq_short_seq_var;
         typedef DDS_DCPSSequence_out < _seq_short_seq> _seq_short_seq_out;
         struct _seq_ushort_seq_uniq_ {};
         typedef DDS_DCPSBFLSeq < DDS::UShort, DDS::UShort, 10> _seq_ushort_seq;
         typedef DDS_DCPSSequence_var < _seq_ushort_seq> _seq_ushort_seq_var;
         typedef DDS_DCPSSequence_out < _seq_ushort_seq> _seq_ushort_seq_out;
         struct _seq_long_seq_uniq_ {};
         typedef DDS_DCPSBFLSeq < DDS::Long, DDS::Long, 10> _seq_long_seq;
         typedef DDS_DCPSSequence_var < _seq_long_seq> _seq_long_seq_var;
         typedef DDS_DCPSSequence_out < _seq_long_seq> _seq_long_seq_out;
         struct _seq_ulong_seq_uniq_ {};
         typedef DDS_DCPSBFLSeq < DDS::ULong, DDS::ULong, 10> _seq_ulong_seq;
         typedef DDS_DCPSSequence_var < _seq_ulong_seq> _seq_ulong_seq_var;
         typedef DDS_DCPSSequence_out < _seq_ulong_seq> _seq_ulong_seq_out;
         struct _seq_longlong_seq_uniq_ {};
         typedef DDS_DCPSBFLSeq < DDS::LongLong, DDS::LongLong, 10> _seq_longlong_seq;
         typedef DDS_DCPSSequence_var < _seq_longlong_seq> _seq_longlong_seq_var;
         typedef DDS_DCPSSequence_out < _seq_longlong_seq> _seq_longlong_seq_out;
         struct _seq_ulonglong_seq_uniq_ {};
         typedef DDS_DCPSBFLSeq < DDS::ULongLong, DDS::ULongLong, 10> _seq_ulonglong_seq;
         typedef DDS_DCPSSequence_var < _seq_ulonglong_seq> _seq_ulonglong_seq_var;
         typedef DDS_DCPSSequence_out < _seq_ulonglong_seq> _seq_ulonglong_seq_out;
         struct _seq_float_seq_uniq_ {};
         typedef DDS_DCPSBFLSeq < DDS::Float, DDS::Float, 10> _seq_float_seq;
         typedef DDS_DCPSSequence_var < _seq_float_seq> _seq_float_seq_var;
         typedef DDS_DCPSSequence_out < _seq_float_seq> _seq_float_seq_out;
         struct _seq_double_seq_uniq_ {};
         typedef DDS_DCPSBFLSeq < DDS::Double, DDS::Double, 10> _seq_double_seq;
         typedef DDS_DCPSSequence_var < _seq_double_seq> _seq_double_seq_var;
         typedef DDS_DCPSSequence_out < _seq_double_seq> _seq_double_seq_out;
         struct _seq_boolean_seq_uniq_ {};
         typedef DDS_DCPSBFLSeq < DDS::Boolean, DDS::Boolean, 10> _seq_boolean_seq;
         typedef DDS_DCPSSequence_var < _seq_boolean_seq> _seq_boolean_seq_var;
         typedef DDS_DCPSSequence_out < _seq_boolean_seq> _seq_boolean_seq_out;
         DDS::ULong block;
         DDS::ULong count;
         _seq_char_seq seq_char;
         _seq_octets_seq seq_octets;
         _seq_short_seq seq_short;
         _seq_ushort_seq seq_ushort;
         _seq_long_seq seq_long;
         _seq_ulong_seq seq_ulong;
         _seq_longlong_seq seq_longlong;
         _seq_ulonglong_seq seq_ulonglong;
         _seq_float_seq seq_float;
         _seq_double_seq seq_double;
         _seq_boolean_seq seq_boolean;
   };

   typedef DDS_DCPSStruct_var < PP_bseq_msg> PP_bseq_msg_var;
   typedef DDS_DCPSStruct_out < PP_bseq_msg> PP_bseq_msg_out;

   struct PP_quit_msg
   {
         DDS::Boolean quit;
   };

   typedef DDS_DCPSStruct_var < PP_quit_msg> PP_quit_msg_var;
   typedef PP_quit_msg&PP_quit_msg_out;
}
template <>
pingpong::PP_array_msg::_str_arr_char_slice* DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_char, pingpong::PP_array_msg::_str_arr_char_slice, pingpong::PP_array_msg::_str_arr_char_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_char, pingpong::PP_array_msg::_str_arr_char_slice, pingpong::PP_array_msg::_str_arr_char_uniq_>::copy (pingpong::PP_array_msg::_str_arr_char_slice *to, const pingpong::PP_array_msg::_str_arr_char_slice* from);
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_char, pingpong::PP_array_msg::_str_arr_char_slice, pingpong::PP_array_msg::_str_arr_char_uniq_>::free (pingpong::PP_array_msg::_str_arr_char_slice *ptr);
template <>
pingpong::PP_array_msg::_str_arr_octet_slice* DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_octet, pingpong::PP_array_msg::_str_arr_octet_slice, pingpong::PP_array_msg::_str_arr_octet_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_octet, pingpong::PP_array_msg::_str_arr_octet_slice, pingpong::PP_array_msg::_str_arr_octet_uniq_>::copy (pingpong::PP_array_msg::_str_arr_octet_slice *to, const pingpong::PP_array_msg::_str_arr_octet_slice* from);
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_octet, pingpong::PP_array_msg::_str_arr_octet_slice, pingpong::PP_array_msg::_str_arr_octet_uniq_>::free (pingpong::PP_array_msg::_str_arr_octet_slice *ptr);
template <>
pingpong::PP_array_msg::_str_arr_short_slice* DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_short, pingpong::PP_array_msg::_str_arr_short_slice, pingpong::PP_array_msg::_str_arr_short_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_short, pingpong::PP_array_msg::_str_arr_short_slice, pingpong::PP_array_msg::_str_arr_short_uniq_>::copy (pingpong::PP_array_msg::_str_arr_short_slice *to, const pingpong::PP_array_msg::_str_arr_short_slice* from);
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_short, pingpong::PP_array_msg::_str_arr_short_slice, pingpong::PP_array_msg::_str_arr_short_uniq_>::free (pingpong::PP_array_msg::_str_arr_short_slice *ptr);
template <>
pingpong::PP_array_msg::_str_arr_ushort_slice* DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_ushort, pingpong::PP_array_msg::_str_arr_ushort_slice, pingpong::PP_array_msg::_str_arr_ushort_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_ushort, pingpong::PP_array_msg::_str_arr_ushort_slice, pingpong::PP_array_msg::_str_arr_ushort_uniq_>::copy (pingpong::PP_array_msg::_str_arr_ushort_slice *to, const pingpong::PP_array_msg::_str_arr_ushort_slice* from);
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_ushort, pingpong::PP_array_msg::_str_arr_ushort_slice, pingpong::PP_array_msg::_str_arr_ushort_uniq_>::free (pingpong::PP_array_msg::_str_arr_ushort_slice *ptr);
template <>
pingpong::PP_array_msg::_str_arr_long_slice* DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_long, pingpong::PP_array_msg::_str_arr_long_slice, pingpong::PP_array_msg::_str_arr_long_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_long, pingpong::PP_array_msg::_str_arr_long_slice, pingpong::PP_array_msg::_str_arr_long_uniq_>::copy (pingpong::PP_array_msg::_str_arr_long_slice *to, const pingpong::PP_array_msg::_str_arr_long_slice* from);
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_long, pingpong::PP_array_msg::_str_arr_long_slice, pingpong::PP_array_msg::_str_arr_long_uniq_>::free (pingpong::PP_array_msg::_str_arr_long_slice *ptr);
template <>
pingpong::PP_array_msg::_str_arr_ulong_slice* DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_ulong, pingpong::PP_array_msg::_str_arr_ulong_slice, pingpong::PP_array_msg::_str_arr_ulong_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_ulong, pingpong::PP_array_msg::_str_arr_ulong_slice, pingpong::PP_array_msg::_str_arr_ulong_uniq_>::copy (pingpong::PP_array_msg::_str_arr_ulong_slice *to, const pingpong::PP_array_msg::_str_arr_ulong_slice* from);
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_ulong, pingpong::PP_array_msg::_str_arr_ulong_slice, pingpong::PP_array_msg::_str_arr_ulong_uniq_>::free (pingpong::PP_array_msg::_str_arr_ulong_slice *ptr);
template <>
pingpong::PP_array_msg::_str_arr_longlong_slice* DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_longlong, pingpong::PP_array_msg::_str_arr_longlong_slice, pingpong::PP_array_msg::_str_arr_longlong_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_longlong, pingpong::PP_array_msg::_str_arr_longlong_slice, pingpong::PP_array_msg::_str_arr_longlong_uniq_>::copy (pingpong::PP_array_msg::_str_arr_longlong_slice *to, const pingpong::PP_array_msg::_str_arr_longlong_slice* from);
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_longlong, pingpong::PP_array_msg::_str_arr_longlong_slice, pingpong::PP_array_msg::_str_arr_longlong_uniq_>::free (pingpong::PP_array_msg::_str_arr_longlong_slice *ptr);
template <>
pingpong::PP_array_msg::_str_arr_ulonglong_slice* DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_ulonglong, pingpong::PP_array_msg::_str_arr_ulonglong_slice, pingpong::PP_array_msg::_str_arr_ulonglong_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_ulonglong, pingpong::PP_array_msg::_str_arr_ulonglong_slice, pingpong::PP_array_msg::_str_arr_ulonglong_uniq_>::copy (pingpong::PP_array_msg::_str_arr_ulonglong_slice *to, const pingpong::PP_array_msg::_str_arr_ulonglong_slice* from);
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_ulonglong, pingpong::PP_array_msg::_str_arr_ulonglong_slice, pingpong::PP_array_msg::_str_arr_ulonglong_uniq_>::free (pingpong::PP_array_msg::_str_arr_ulonglong_slice *ptr);
template <>
pingpong::PP_array_msg::_str_arr_float_slice* DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_float, pingpong::PP_array_msg::_str_arr_float_slice, pingpong::PP_array_msg::_str_arr_float_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_float, pingpong::PP_array_msg::_str_arr_float_slice, pingpong::PP_array_msg::_str_arr_float_uniq_>::copy (pingpong::PP_array_msg::_str_arr_float_slice *to, const pingpong::PP_array_msg::_str_arr_float_slice* from);
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_float, pingpong::PP_array_msg::_str_arr_float_slice, pingpong::PP_array_msg::_str_arr_float_uniq_>::free (pingpong::PP_array_msg::_str_arr_float_slice *ptr);
template <>
pingpong::PP_array_msg::_str_arr_double_slice* DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_double, pingpong::PP_array_msg::_str_arr_double_slice, pingpong::PP_array_msg::_str_arr_double_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_double, pingpong::PP_array_msg::_str_arr_double_slice, pingpong::PP_array_msg::_str_arr_double_uniq_>::copy (pingpong::PP_array_msg::_str_arr_double_slice *to, const pingpong::PP_array_msg::_str_arr_double_slice* from);
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_double, pingpong::PP_array_msg::_str_arr_double_slice, pingpong::PP_array_msg::_str_arr_double_uniq_>::free (pingpong::PP_array_msg::_str_arr_double_slice *ptr);
template <>
pingpong::PP_array_msg::_str_arr_boolean_slice* DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_boolean, pingpong::PP_array_msg::_str_arr_boolean_slice, pingpong::PP_array_msg::_str_arr_boolean_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_boolean, pingpong::PP_array_msg::_str_arr_boolean_slice, pingpong::PP_array_msg::_str_arr_boolean_uniq_>::copy (pingpong::PP_array_msg::_str_arr_boolean_slice *to, const pingpong::PP_array_msg::_str_arr_boolean_slice* from);
template <>
void DDS_DCPS_ArrayHelper < pingpong::PP_array_msg::_str_arr_boolean, pingpong::PP_array_msg::_str_arr_boolean_slice, pingpong::PP_array_msg::_str_arr_boolean_uniq_>::free (pingpong::PP_array_msg::_str_arr_boolean_slice *ptr);




#endif

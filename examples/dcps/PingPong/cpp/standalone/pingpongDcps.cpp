//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: pingpongDcps.cpp
//  Source: pingpongDcps.idl
//  Generated: Mon Oct 23 17:11:01 2017
//  OpenSplice 6.8.2
//  
//******************************************************************

#include "pingpongDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < pingpong::PP_quit_msg, struct PP_quit_msgSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < pingpong::PP_bseq_msg, struct PP_bseq_msgSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < pingpong::PP_array_msg, struct PP_array_msgSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < pingpong::PP_fixed_msg, struct PP_fixed_msgSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < pingpong::PP_string_msg, struct PP_string_msgSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < pingpong::PP_seq_msg, struct PP_seq_msgSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < pingpong::PP_min_msg, struct PP_min_msgSeq_uniq_>;
#endif

const char * pingpong::PP_min_msgTypeSupportInterface::_local_id = "IDL:pingpong/PP_min_msgTypeSupportInterface:1.0";

pingpong::PP_min_msgTypeSupportInterface_ptr pingpong::PP_min_msgTypeSupportInterface::_duplicate (pingpong::PP_min_msgTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_min_msgTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_min_msgTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_min_msgTypeSupportInterface_ptr pingpong::PP_min_msgTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_min_msgTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_min_msgTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < pingpong::PP_min_msgTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_min_msgTypeSupportInterface_ptr pingpong::PP_min_msgTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_min_msgTypeSupportInterface_ptr result;
   result = dynamic_cast < pingpong::PP_min_msgTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_min_msgDataWriter::_local_id = "IDL:pingpong/PP_min_msgDataWriter:1.0";

pingpong::PP_min_msgDataWriter_ptr pingpong::PP_min_msgDataWriter::_duplicate (pingpong::PP_min_msgDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_min_msgDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_min_msgDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_min_msgDataWriter_ptr pingpong::PP_min_msgDataWriter::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_min_msgDataWriter_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_min_msgDataWriter::_local_id))
   {
      result = dynamic_cast < pingpong::PP_min_msgDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_min_msgDataWriter_ptr pingpong::PP_min_msgDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_min_msgDataWriter_ptr result;
   result = dynamic_cast < pingpong::PP_min_msgDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_min_msgDataReader::_local_id = "IDL:pingpong/PP_min_msgDataReader:1.0";

pingpong::PP_min_msgDataReader_ptr pingpong::PP_min_msgDataReader::_duplicate (pingpong::PP_min_msgDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_min_msgDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_min_msgDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_min_msgDataReader_ptr pingpong::PP_min_msgDataReader::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_min_msgDataReader_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_min_msgDataReader::_local_id))
   {
      result = dynamic_cast < pingpong::PP_min_msgDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_min_msgDataReader_ptr pingpong::PP_min_msgDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_min_msgDataReader_ptr result;
   result = dynamic_cast < pingpong::PP_min_msgDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_min_msgDataReaderView::_local_id = "IDL:pingpong/PP_min_msgDataReaderView:1.0";

pingpong::PP_min_msgDataReaderView_ptr pingpong::PP_min_msgDataReaderView::_duplicate (pingpong::PP_min_msgDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_min_msgDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_min_msgDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_min_msgDataReaderView_ptr pingpong::PP_min_msgDataReaderView::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_min_msgDataReaderView_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_min_msgDataReaderView::_local_id))
   {
      result = dynamic_cast < pingpong::PP_min_msgDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_min_msgDataReaderView_ptr pingpong::PP_min_msgDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_min_msgDataReaderView_ptr result;
   result = dynamic_cast < pingpong::PP_min_msgDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_seq_msgTypeSupportInterface::_local_id = "IDL:pingpong/PP_seq_msgTypeSupportInterface:1.0";

pingpong::PP_seq_msgTypeSupportInterface_ptr pingpong::PP_seq_msgTypeSupportInterface::_duplicate (pingpong::PP_seq_msgTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_seq_msgTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_seq_msgTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_seq_msgTypeSupportInterface_ptr pingpong::PP_seq_msgTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_seq_msgTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_seq_msgTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < pingpong::PP_seq_msgTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_seq_msgTypeSupportInterface_ptr pingpong::PP_seq_msgTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_seq_msgTypeSupportInterface_ptr result;
   result = dynamic_cast < pingpong::PP_seq_msgTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_seq_msgDataWriter::_local_id = "IDL:pingpong/PP_seq_msgDataWriter:1.0";

pingpong::PP_seq_msgDataWriter_ptr pingpong::PP_seq_msgDataWriter::_duplicate (pingpong::PP_seq_msgDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_seq_msgDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_seq_msgDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_seq_msgDataWriter_ptr pingpong::PP_seq_msgDataWriter::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_seq_msgDataWriter_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_seq_msgDataWriter::_local_id))
   {
      result = dynamic_cast < pingpong::PP_seq_msgDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_seq_msgDataWriter_ptr pingpong::PP_seq_msgDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_seq_msgDataWriter_ptr result;
   result = dynamic_cast < pingpong::PP_seq_msgDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_seq_msgDataReader::_local_id = "IDL:pingpong/PP_seq_msgDataReader:1.0";

pingpong::PP_seq_msgDataReader_ptr pingpong::PP_seq_msgDataReader::_duplicate (pingpong::PP_seq_msgDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_seq_msgDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_seq_msgDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_seq_msgDataReader_ptr pingpong::PP_seq_msgDataReader::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_seq_msgDataReader_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_seq_msgDataReader::_local_id))
   {
      result = dynamic_cast < pingpong::PP_seq_msgDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_seq_msgDataReader_ptr pingpong::PP_seq_msgDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_seq_msgDataReader_ptr result;
   result = dynamic_cast < pingpong::PP_seq_msgDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_seq_msgDataReaderView::_local_id = "IDL:pingpong/PP_seq_msgDataReaderView:1.0";

pingpong::PP_seq_msgDataReaderView_ptr pingpong::PP_seq_msgDataReaderView::_duplicate (pingpong::PP_seq_msgDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_seq_msgDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_seq_msgDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_seq_msgDataReaderView_ptr pingpong::PP_seq_msgDataReaderView::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_seq_msgDataReaderView_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_seq_msgDataReaderView::_local_id))
   {
      result = dynamic_cast < pingpong::PP_seq_msgDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_seq_msgDataReaderView_ptr pingpong::PP_seq_msgDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_seq_msgDataReaderView_ptr result;
   result = dynamic_cast < pingpong::PP_seq_msgDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_string_msgTypeSupportInterface::_local_id = "IDL:pingpong/PP_string_msgTypeSupportInterface:1.0";

pingpong::PP_string_msgTypeSupportInterface_ptr pingpong::PP_string_msgTypeSupportInterface::_duplicate (pingpong::PP_string_msgTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_string_msgTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_string_msgTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_string_msgTypeSupportInterface_ptr pingpong::PP_string_msgTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_string_msgTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_string_msgTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < pingpong::PP_string_msgTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_string_msgTypeSupportInterface_ptr pingpong::PP_string_msgTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_string_msgTypeSupportInterface_ptr result;
   result = dynamic_cast < pingpong::PP_string_msgTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_string_msgDataWriter::_local_id = "IDL:pingpong/PP_string_msgDataWriter:1.0";

pingpong::PP_string_msgDataWriter_ptr pingpong::PP_string_msgDataWriter::_duplicate (pingpong::PP_string_msgDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_string_msgDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_string_msgDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_string_msgDataWriter_ptr pingpong::PP_string_msgDataWriter::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_string_msgDataWriter_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_string_msgDataWriter::_local_id))
   {
      result = dynamic_cast < pingpong::PP_string_msgDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_string_msgDataWriter_ptr pingpong::PP_string_msgDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_string_msgDataWriter_ptr result;
   result = dynamic_cast < pingpong::PP_string_msgDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_string_msgDataReader::_local_id = "IDL:pingpong/PP_string_msgDataReader:1.0";

pingpong::PP_string_msgDataReader_ptr pingpong::PP_string_msgDataReader::_duplicate (pingpong::PP_string_msgDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_string_msgDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_string_msgDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_string_msgDataReader_ptr pingpong::PP_string_msgDataReader::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_string_msgDataReader_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_string_msgDataReader::_local_id))
   {
      result = dynamic_cast < pingpong::PP_string_msgDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_string_msgDataReader_ptr pingpong::PP_string_msgDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_string_msgDataReader_ptr result;
   result = dynamic_cast < pingpong::PP_string_msgDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_string_msgDataReaderView::_local_id = "IDL:pingpong/PP_string_msgDataReaderView:1.0";

pingpong::PP_string_msgDataReaderView_ptr pingpong::PP_string_msgDataReaderView::_duplicate (pingpong::PP_string_msgDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_string_msgDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_string_msgDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_string_msgDataReaderView_ptr pingpong::PP_string_msgDataReaderView::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_string_msgDataReaderView_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_string_msgDataReaderView::_local_id))
   {
      result = dynamic_cast < pingpong::PP_string_msgDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_string_msgDataReaderView_ptr pingpong::PP_string_msgDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_string_msgDataReaderView_ptr result;
   result = dynamic_cast < pingpong::PP_string_msgDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_fixed_msgTypeSupportInterface::_local_id = "IDL:pingpong/PP_fixed_msgTypeSupportInterface:1.0";

pingpong::PP_fixed_msgTypeSupportInterface_ptr pingpong::PP_fixed_msgTypeSupportInterface::_duplicate (pingpong::PP_fixed_msgTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_fixed_msgTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_fixed_msgTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_fixed_msgTypeSupportInterface_ptr pingpong::PP_fixed_msgTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_fixed_msgTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_fixed_msgTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < pingpong::PP_fixed_msgTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_fixed_msgTypeSupportInterface_ptr pingpong::PP_fixed_msgTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_fixed_msgTypeSupportInterface_ptr result;
   result = dynamic_cast < pingpong::PP_fixed_msgTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_fixed_msgDataWriter::_local_id = "IDL:pingpong/PP_fixed_msgDataWriter:1.0";

pingpong::PP_fixed_msgDataWriter_ptr pingpong::PP_fixed_msgDataWriter::_duplicate (pingpong::PP_fixed_msgDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_fixed_msgDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_fixed_msgDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_fixed_msgDataWriter_ptr pingpong::PP_fixed_msgDataWriter::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_fixed_msgDataWriter_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_fixed_msgDataWriter::_local_id))
   {
      result = dynamic_cast < pingpong::PP_fixed_msgDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_fixed_msgDataWriter_ptr pingpong::PP_fixed_msgDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_fixed_msgDataWriter_ptr result;
   result = dynamic_cast < pingpong::PP_fixed_msgDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_fixed_msgDataReader::_local_id = "IDL:pingpong/PP_fixed_msgDataReader:1.0";

pingpong::PP_fixed_msgDataReader_ptr pingpong::PP_fixed_msgDataReader::_duplicate (pingpong::PP_fixed_msgDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_fixed_msgDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_fixed_msgDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_fixed_msgDataReader_ptr pingpong::PP_fixed_msgDataReader::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_fixed_msgDataReader_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_fixed_msgDataReader::_local_id))
   {
      result = dynamic_cast < pingpong::PP_fixed_msgDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_fixed_msgDataReader_ptr pingpong::PP_fixed_msgDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_fixed_msgDataReader_ptr result;
   result = dynamic_cast < pingpong::PP_fixed_msgDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_fixed_msgDataReaderView::_local_id = "IDL:pingpong/PP_fixed_msgDataReaderView:1.0";

pingpong::PP_fixed_msgDataReaderView_ptr pingpong::PP_fixed_msgDataReaderView::_duplicate (pingpong::PP_fixed_msgDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_fixed_msgDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_fixed_msgDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_fixed_msgDataReaderView_ptr pingpong::PP_fixed_msgDataReaderView::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_fixed_msgDataReaderView_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_fixed_msgDataReaderView::_local_id))
   {
      result = dynamic_cast < pingpong::PP_fixed_msgDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_fixed_msgDataReaderView_ptr pingpong::PP_fixed_msgDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_fixed_msgDataReaderView_ptr result;
   result = dynamic_cast < pingpong::PP_fixed_msgDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_array_msgTypeSupportInterface::_local_id = "IDL:pingpong/PP_array_msgTypeSupportInterface:1.0";

pingpong::PP_array_msgTypeSupportInterface_ptr pingpong::PP_array_msgTypeSupportInterface::_duplicate (pingpong::PP_array_msgTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_array_msgTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_array_msgTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_array_msgTypeSupportInterface_ptr pingpong::PP_array_msgTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_array_msgTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_array_msgTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < pingpong::PP_array_msgTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_array_msgTypeSupportInterface_ptr pingpong::PP_array_msgTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_array_msgTypeSupportInterface_ptr result;
   result = dynamic_cast < pingpong::PP_array_msgTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_array_msgDataWriter::_local_id = "IDL:pingpong/PP_array_msgDataWriter:1.0";

pingpong::PP_array_msgDataWriter_ptr pingpong::PP_array_msgDataWriter::_duplicate (pingpong::PP_array_msgDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_array_msgDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_array_msgDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_array_msgDataWriter_ptr pingpong::PP_array_msgDataWriter::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_array_msgDataWriter_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_array_msgDataWriter::_local_id))
   {
      result = dynamic_cast < pingpong::PP_array_msgDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_array_msgDataWriter_ptr pingpong::PP_array_msgDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_array_msgDataWriter_ptr result;
   result = dynamic_cast < pingpong::PP_array_msgDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_array_msgDataReader::_local_id = "IDL:pingpong/PP_array_msgDataReader:1.0";

pingpong::PP_array_msgDataReader_ptr pingpong::PP_array_msgDataReader::_duplicate (pingpong::PP_array_msgDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_array_msgDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_array_msgDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_array_msgDataReader_ptr pingpong::PP_array_msgDataReader::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_array_msgDataReader_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_array_msgDataReader::_local_id))
   {
      result = dynamic_cast < pingpong::PP_array_msgDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_array_msgDataReader_ptr pingpong::PP_array_msgDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_array_msgDataReader_ptr result;
   result = dynamic_cast < pingpong::PP_array_msgDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_array_msgDataReaderView::_local_id = "IDL:pingpong/PP_array_msgDataReaderView:1.0";

pingpong::PP_array_msgDataReaderView_ptr pingpong::PP_array_msgDataReaderView::_duplicate (pingpong::PP_array_msgDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_array_msgDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_array_msgDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_array_msgDataReaderView_ptr pingpong::PP_array_msgDataReaderView::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_array_msgDataReaderView_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_array_msgDataReaderView::_local_id))
   {
      result = dynamic_cast < pingpong::PP_array_msgDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_array_msgDataReaderView_ptr pingpong::PP_array_msgDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_array_msgDataReaderView_ptr result;
   result = dynamic_cast < pingpong::PP_array_msgDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_bseq_msgTypeSupportInterface::_local_id = "IDL:pingpong/PP_bseq_msgTypeSupportInterface:1.0";

pingpong::PP_bseq_msgTypeSupportInterface_ptr pingpong::PP_bseq_msgTypeSupportInterface::_duplicate (pingpong::PP_bseq_msgTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_bseq_msgTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_bseq_msgTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_bseq_msgTypeSupportInterface_ptr pingpong::PP_bseq_msgTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_bseq_msgTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_bseq_msgTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < pingpong::PP_bseq_msgTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_bseq_msgTypeSupportInterface_ptr pingpong::PP_bseq_msgTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_bseq_msgTypeSupportInterface_ptr result;
   result = dynamic_cast < pingpong::PP_bseq_msgTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_bseq_msgDataWriter::_local_id = "IDL:pingpong/PP_bseq_msgDataWriter:1.0";

pingpong::PP_bseq_msgDataWriter_ptr pingpong::PP_bseq_msgDataWriter::_duplicate (pingpong::PP_bseq_msgDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_bseq_msgDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_bseq_msgDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_bseq_msgDataWriter_ptr pingpong::PP_bseq_msgDataWriter::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_bseq_msgDataWriter_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_bseq_msgDataWriter::_local_id))
   {
      result = dynamic_cast < pingpong::PP_bseq_msgDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_bseq_msgDataWriter_ptr pingpong::PP_bseq_msgDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_bseq_msgDataWriter_ptr result;
   result = dynamic_cast < pingpong::PP_bseq_msgDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_bseq_msgDataReader::_local_id = "IDL:pingpong/PP_bseq_msgDataReader:1.0";

pingpong::PP_bseq_msgDataReader_ptr pingpong::PP_bseq_msgDataReader::_duplicate (pingpong::PP_bseq_msgDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_bseq_msgDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_bseq_msgDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_bseq_msgDataReader_ptr pingpong::PP_bseq_msgDataReader::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_bseq_msgDataReader_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_bseq_msgDataReader::_local_id))
   {
      result = dynamic_cast < pingpong::PP_bseq_msgDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_bseq_msgDataReader_ptr pingpong::PP_bseq_msgDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_bseq_msgDataReader_ptr result;
   result = dynamic_cast < pingpong::PP_bseq_msgDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_bseq_msgDataReaderView::_local_id = "IDL:pingpong/PP_bseq_msgDataReaderView:1.0";

pingpong::PP_bseq_msgDataReaderView_ptr pingpong::PP_bseq_msgDataReaderView::_duplicate (pingpong::PP_bseq_msgDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_bseq_msgDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_bseq_msgDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_bseq_msgDataReaderView_ptr pingpong::PP_bseq_msgDataReaderView::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_bseq_msgDataReaderView_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_bseq_msgDataReaderView::_local_id))
   {
      result = dynamic_cast < pingpong::PP_bseq_msgDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_bseq_msgDataReaderView_ptr pingpong::PP_bseq_msgDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_bseq_msgDataReaderView_ptr result;
   result = dynamic_cast < pingpong::PP_bseq_msgDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_quit_msgTypeSupportInterface::_local_id = "IDL:pingpong/PP_quit_msgTypeSupportInterface:1.0";

pingpong::PP_quit_msgTypeSupportInterface_ptr pingpong::PP_quit_msgTypeSupportInterface::_duplicate (pingpong::PP_quit_msgTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_quit_msgTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_quit_msgTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_quit_msgTypeSupportInterface_ptr pingpong::PP_quit_msgTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_quit_msgTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_quit_msgTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < pingpong::PP_quit_msgTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_quit_msgTypeSupportInterface_ptr pingpong::PP_quit_msgTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_quit_msgTypeSupportInterface_ptr result;
   result = dynamic_cast < pingpong::PP_quit_msgTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_quit_msgDataWriter::_local_id = "IDL:pingpong/PP_quit_msgDataWriter:1.0";

pingpong::PP_quit_msgDataWriter_ptr pingpong::PP_quit_msgDataWriter::_duplicate (pingpong::PP_quit_msgDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_quit_msgDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_quit_msgDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_quit_msgDataWriter_ptr pingpong::PP_quit_msgDataWriter::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_quit_msgDataWriter_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_quit_msgDataWriter::_local_id))
   {
      result = dynamic_cast < pingpong::PP_quit_msgDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_quit_msgDataWriter_ptr pingpong::PP_quit_msgDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_quit_msgDataWriter_ptr result;
   result = dynamic_cast < pingpong::PP_quit_msgDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_quit_msgDataReader::_local_id = "IDL:pingpong/PP_quit_msgDataReader:1.0";

pingpong::PP_quit_msgDataReader_ptr pingpong::PP_quit_msgDataReader::_duplicate (pingpong::PP_quit_msgDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_quit_msgDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_quit_msgDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_quit_msgDataReader_ptr pingpong::PP_quit_msgDataReader::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_quit_msgDataReader_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_quit_msgDataReader::_local_id))
   {
      result = dynamic_cast < pingpong::PP_quit_msgDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_quit_msgDataReader_ptr pingpong::PP_quit_msgDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_quit_msgDataReader_ptr result;
   result = dynamic_cast < pingpong::PP_quit_msgDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * pingpong::PP_quit_msgDataReaderView::_local_id = "IDL:pingpong/PP_quit_msgDataReaderView:1.0";

pingpong::PP_quit_msgDataReaderView_ptr pingpong::PP_quit_msgDataReaderView::_duplicate (pingpong::PP_quit_msgDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean pingpong::PP_quit_msgDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, pingpong::PP_quit_msgDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

pingpong::PP_quit_msgDataReaderView_ptr pingpong::PP_quit_msgDataReaderView::_narrow (DDS::Object_ptr p)
{
   pingpong::PP_quit_msgDataReaderView_ptr result = NULL;
   if (p && p->_is_a (pingpong::PP_quit_msgDataReaderView::_local_id))
   {
      result = dynamic_cast < pingpong::PP_quit_msgDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

pingpong::PP_quit_msgDataReaderView_ptr pingpong::PP_quit_msgDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   pingpong::PP_quit_msgDataReaderView_ptr result;
   result = dynamic_cast < pingpong::PP_quit_msgDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}




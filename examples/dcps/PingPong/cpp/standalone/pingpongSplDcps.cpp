#include "pingpongSplDcps.h"
#include "ccpp_pingpong.h"

#include <v_copyIn.h>
#include <v_topic.h>
#include <os_stdlib.h>
#include <string.h>
#include <os_report.h>

v_copyin_result
__pingpong_PP_min_msg__copyIn(
    c_base base,
    const struct ::pingpong::PP_min_msg *from,
    struct _pingpong_PP_min_msg *to)
{
    v_copyin_result result = V_COPYIN_RESULT_OK;
    (void) base;

    to->block = (c_ulong)from->block;
    to->count = (c_ulong)from->count;
    return result;
}

v_copyin_result
__pingpong_seq_char__copyIn(
    c_base base,
    const ::pingpong::seq_char *from,
    _pingpong_seq_char *to)
{
    v_copyin_result result = V_COPYIN_RESULT_OK;
    (void) base;

/* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2645 */

    static c_type type0 = NULL;
    c_type subtype0 = NULL;
    c_ulong length0;
    c_char *dest0;

    if (type0 == NULL) {
        subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_char"));
        type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_char>",subtype0,0);
        c_free(subtype0);
    }
    length0 = (*from).length();
#ifdef OSPL_BOUNDS_CHECK
    dest0 = (c_char *)c_newSequence_s(c_collectionType(type0), length0);
    if(dest0 != NULL) {
        /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
        const c_char *buf0;
        buf0 = (const c_char *)(*from).get_buffer();
        memcpy (dest0,buf0,length0* sizeof(*dest0));
        *to = (_pingpong_seq_char)dest0;
    } else {
        result = V_COPYIN_RESULT_OUT_OF_MEMORY;
    }
#else
    dest0 = (c_char *)c_newSequence_s(c_collectionType(type0), length0);
    if(dest0 != NULL) {
        /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
        const c_char *buf0;
        buf0 = (const c_char *)(*from).get_buffer();
        memcpy (dest0,buf0,length0* sizeof(*dest0));
        *to = (_pingpong_seq_char)dest0;
    } else {
        result = V_COPYIN_RESULT_OUT_OF_MEMORY;
    }
#endif
    return result;
}

v_copyin_result
__pingpong_PP_seq_msg__copyIn(
    c_base base,
    const struct ::pingpong::PP_seq_msg *from,
    struct _pingpong_PP_seq_msg *to)
{
    v_copyin_result result = V_COPYIN_RESULT_OK;
    (void) base;

    to->block = (c_ulong)from->block;
    to->count = (c_ulong)from->count;
    if(V_COPYIN_RESULT_IS_OK(result)){
        extern v_copyin_result __pingpong_seq_char__copyIn(c_base, const ::pingpong::seq_char *, _pingpong_seq_char *);
        result = __pingpong_seq_char__copyIn(base, &from->payload, &to->payload);
    }
    return result;
}

v_copyin_result
__pingpong_PP_string_msg__copyIn(
    c_base base,
    const struct ::pingpong::PP_string_msg *from,
    struct _pingpong_PP_string_msg *to)
{
    v_copyin_result result = V_COPYIN_RESULT_OK;
    (void) base;

    to->block = (c_ulong)from->block;
    to->count = (c_ulong)from->count;
#ifdef OSPL_BOUNDS_CHECK
    if(from->a_string){
        to->a_string = c_stringNew_s(base, from->a_string);
        if(to->a_string == NULL) {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
    } else {
        OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_string_msg.a_string' of type 'c_string' is NULL.");
        result = V_COPYIN_RESULT_INVALID;
    }
#else
    to->a_string = c_stringNew_s(base, from->a_string);
    if(to->a_string == NULL) {
        result = V_COPYIN_RESULT_OUT_OF_MEMORY;
    }
#endif
    return result;
}

v_copyin_result
__pingpong_PP_fixed_msg__copyIn(
    c_base base,
    const struct ::pingpong::PP_fixed_msg *from,
    struct _pingpong_PP_fixed_msg *to)
{
    v_copyin_result result = V_COPYIN_RESULT_OK;
    (void) base;

    to->block = (c_ulong)from->block;
    to->count = (c_ulong)from->count;
    to->a_char = (c_char)from->a_char;
    to->a_octet = (c_octet)from->a_octet;
    to->a_short = (c_short)from->a_short;
    to->a_ushort = (c_ushort)from->a_ushort;
    to->a_long = (c_long)from->a_long;
    to->a_ulong = (c_ulong)from->a_ulong;
    to->a_longlong = (c_longlong)from->a_longlong;
    to->a_ulonglong = (c_ulonglong)from->a_ulonglong;
    to->a_float = (c_float)from->a_float;
    to->a_double = (c_double)from->a_double;
    to->a_boolean = (c_bool)from->a_boolean;
#ifdef OSPL_BOUNDS_CHECK
    if(from->a_bstring){
        if(((unsigned int)strlen(from->a_bstring)) <= 40){
            to->a_bstring = c_stringNew_s(base, from->a_bstring);
            if(to->a_bstring == NULL) {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
        } else {
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_fixed_msg.a_bstring' of type 'C_STRING<40>' is out of range.");
            result = V_COPYIN_RESULT_INVALID;
        }
    } else {
        OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_fixed_msg.a_bstring' of type 'C_STRING<40>' is NULL.");
        result = V_COPYIN_RESULT_INVALID;
    }
#else
    to->a_bstring = c_stringNew_s(base, from->a_bstring);
    if(to->a_bstring == NULL) {
        result = V_COPYIN_RESULT_OUT_OF_MEMORY;
    }
#endif
    return result;
}

v_copyin_result
__pingpong_PP_array_msg__copyIn(
    c_base base,
    const struct ::pingpong::PP_array_msg *from,
    struct _pingpong_PP_array_msg *to)
{
    v_copyin_result result = V_COPYIN_RESULT_OK;
    (void) base;

    to->block = (c_ulong)from->block;
    to->count = (c_ulong)from->count;
    {
        typedef c_char _DestType[10];
        _DestType *dest = &to->str_arr_char;
        memcpy (dest, from->str_arr_char, sizeof (*dest));
    }
    {
        typedef c_octet _DestType[10];
        _DestType *dest = &to->str_arr_octet;
        memcpy (dest, from->str_arr_octet, sizeof (*dest));
    }
    {
        typedef c_short _DestType[10];
        _DestType *dest = &to->str_arr_short;
        memcpy (dest, from->str_arr_short, sizeof (*dest));
    }
    {
        typedef c_ushort _DestType[10];
        _DestType *dest = &to->str_arr_ushort;
        memcpy (dest, from->str_arr_ushort, sizeof (*dest));
    }
    {
        typedef c_long _DestType[10];
        _DestType *dest = &to->str_arr_long;
        memcpy (dest, from->str_arr_long, sizeof (*dest));
    }
    {
        typedef c_ulong _DestType[10];
        _DestType *dest = &to->str_arr_ulong;
        memcpy (dest, from->str_arr_ulong, sizeof (*dest));
    }
    {
        typedef c_longlong _DestType[10];
        _DestType *dest = &to->str_arr_longlong;
        memcpy (dest, from->str_arr_longlong, sizeof (*dest));
    }
    {
        typedef c_ulonglong _DestType[10];
        _DestType *dest = &to->str_arr_ulonglong;
        memcpy (dest, from->str_arr_ulonglong, sizeof (*dest));
    }
    {
        typedef c_float _DestType[10];
        _DestType *dest = &to->str_arr_float;
        memcpy (dest, from->str_arr_float, sizeof (*dest));
    }
    {
        typedef c_double _DestType[10];
        _DestType *dest = &to->str_arr_double;
        memcpy (dest, from->str_arr_double, sizeof (*dest));
    }
    {
        typedef c_bool _DestType[11];
        _DestType *dest = &to->str_arr_boolean;
        memcpy (dest, from->str_arr_boolean, sizeof (*dest));
    }
    return result;
}

v_copyin_result
__pingpong_PP_bseq_msg__copyIn(
    c_base base,
    const struct ::pingpong::PP_bseq_msg *from,
    struct _pingpong_PP_bseq_msg *to)
{
    v_copyin_result result = V_COPYIN_RESULT_OK;
    (void) base;

    to->block = (c_ulong)from->block;
    to->count = (c_ulong)from->count;
    {
/* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 826 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        c_char *dest0;
        const ::pingpong::PP_bseq_msg::_seq_char_seq *src = &from->seq_char;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_char"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_char,10>",subtype0,10);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
        if(length0 > 10){
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_bseq_msg.seq_char' of type 'C_SEQUENCE<c_char,10>' is out of range.");
            result = V_COPYIN_RESULT_INVALID;
        } else {
            dest0 = (c_char *)c_newSequence_s(c_collectionType(type0),length0);
            if(dest0 != NULL) {
                /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
                const c_char *buf0;
                buf0 = (const c_char *)(*src).get_buffer();
                memcpy (dest0,buf0,length0* sizeof(*dest0));
                to->seq_char = (c_sequence)dest0;
            }
            } else {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#else
        dest0 = (c_char *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
            const c_char *buf0;
            buf0 = (const c_char *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->seq_char = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
    }
    {
/* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 826 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        c_octet *dest0;
        const ::pingpong::PP_bseq_msg::_seq_octets_seq *src = &from->seq_octets;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_octet"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_octet,10>",subtype0,10);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
        if(length0 > 10){
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_bseq_msg.seq_octets' of type 'C_SEQUENCE<c_octet,10>' is out of range.");
            result = V_COPYIN_RESULT_INVALID;
        } else {
            dest0 = (c_octet *)c_newSequence_s(c_collectionType(type0),length0);
            if(dest0 != NULL) {
                /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
                const c_octet *buf0;
                buf0 = (const c_octet *)(*src).get_buffer();
                memcpy (dest0,buf0,length0* sizeof(*dest0));
                to->seq_octets = (c_sequence)dest0;
            }
            } else {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#else
        dest0 = (c_octet *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
            const c_octet *buf0;
            buf0 = (const c_octet *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->seq_octets = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
    }
    {
/* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 826 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        c_short *dest0;
        const ::pingpong::PP_bseq_msg::_seq_short_seq *src = &from->seq_short;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_short"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_short,10>",subtype0,10);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
        if(length0 > 10){
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_bseq_msg.seq_short' of type 'C_SEQUENCE<c_short,10>' is out of range.");
            result = V_COPYIN_RESULT_INVALID;
        } else {
            dest0 = (c_short *)c_newSequence_s(c_collectionType(type0),length0);
            if(dest0 != NULL) {
                /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
                const c_short *buf0;
                buf0 = (const c_short *)(*src).get_buffer();
                memcpy (dest0,buf0,length0* sizeof(*dest0));
                to->seq_short = (c_sequence)dest0;
            }
            } else {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#else
        dest0 = (c_short *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
            const c_short *buf0;
            buf0 = (const c_short *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->seq_short = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
    }
    {
/* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 826 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        c_ushort *dest0;
        const ::pingpong::PP_bseq_msg::_seq_ushort_seq *src = &from->seq_ushort;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_ushort"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_ushort,10>",subtype0,10);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
        if(length0 > 10){
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_bseq_msg.seq_ushort' of type 'C_SEQUENCE<c_ushort,10>' is out of range.");
            result = V_COPYIN_RESULT_INVALID;
        } else {
            dest0 = (c_ushort *)c_newSequence_s(c_collectionType(type0),length0);
            if(dest0 != NULL) {
                /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
                const c_ushort *buf0;
                buf0 = (const c_ushort *)(*src).get_buffer();
                memcpy (dest0,buf0,length0* sizeof(*dest0));
                to->seq_ushort = (c_sequence)dest0;
            }
            } else {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#else
        dest0 = (c_ushort *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
            const c_ushort *buf0;
            buf0 = (const c_ushort *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->seq_ushort = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
    }
    {
/* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 826 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        c_long *dest0;
        const ::pingpong::PP_bseq_msg::_seq_long_seq *src = &from->seq_long;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_long"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_long,10>",subtype0,10);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
        if(length0 > 10){
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_bseq_msg.seq_long' of type 'C_SEQUENCE<c_long,10>' is out of range.");
            result = V_COPYIN_RESULT_INVALID;
        } else {
            dest0 = (c_long *)c_newSequence_s(c_collectionType(type0),length0);
            if(dest0 != NULL) {
                /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
                const c_long *buf0;
                buf0 = (const c_long *)(*src).get_buffer();
                memcpy (dest0,buf0,length0* sizeof(*dest0));
                to->seq_long = (c_sequence)dest0;
            }
            } else {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#else
        dest0 = (c_long *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
            const c_long *buf0;
            buf0 = (const c_long *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->seq_long = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
    }
    {
/* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 826 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        c_ulong *dest0;
        const ::pingpong::PP_bseq_msg::_seq_ulong_seq *src = &from->seq_ulong;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_ulong"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_ulong,10>",subtype0,10);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
        if(length0 > 10){
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_bseq_msg.seq_ulong' of type 'C_SEQUENCE<c_ulong,10>' is out of range.");
            result = V_COPYIN_RESULT_INVALID;
        } else {
            dest0 = (c_ulong *)c_newSequence_s(c_collectionType(type0),length0);
            if(dest0 != NULL) {
                /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
                const c_ulong *buf0;
                buf0 = (const c_ulong *)(*src).get_buffer();
                memcpy (dest0,buf0,length0* sizeof(*dest0));
                to->seq_ulong = (c_sequence)dest0;
            }
            } else {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#else
        dest0 = (c_ulong *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
            const c_ulong *buf0;
            buf0 = (const c_ulong *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->seq_ulong = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
    }
    {
/* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 826 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        c_longlong *dest0;
        const ::pingpong::PP_bseq_msg::_seq_longlong_seq *src = &from->seq_longlong;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_longlong"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_longlong,10>",subtype0,10);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
        if(length0 > 10){
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_bseq_msg.seq_longlong' of type 'C_SEQUENCE<c_longlong,10>' is out of range.");
            result = V_COPYIN_RESULT_INVALID;
        } else {
            dest0 = (c_longlong *)c_newSequence_s(c_collectionType(type0),length0);
            if(dest0 != NULL) {
                /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
                const c_longlong *buf0;
                buf0 = (const c_longlong *)(*src).get_buffer();
                memcpy (dest0,buf0,length0* sizeof(*dest0));
                to->seq_longlong = (c_sequence)dest0;
            }
            } else {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#else
        dest0 = (c_longlong *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
            const c_longlong *buf0;
            buf0 = (const c_longlong *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->seq_longlong = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
    }
    {
/* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 826 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        c_ulonglong *dest0;
        const ::pingpong::PP_bseq_msg::_seq_ulonglong_seq *src = &from->seq_ulonglong;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_ulonglong"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_ulonglong,10>",subtype0,10);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
        if(length0 > 10){
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_bseq_msg.seq_ulonglong' of type 'C_SEQUENCE<c_ulonglong,10>' is out of range.");
            result = V_COPYIN_RESULT_INVALID;
        } else {
            dest0 = (c_ulonglong *)c_newSequence_s(c_collectionType(type0),length0);
            if(dest0 != NULL) {
                /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
                const c_ulonglong *buf0;
                buf0 = (const c_ulonglong *)(*src).get_buffer();
                memcpy (dest0,buf0,length0* sizeof(*dest0));
                to->seq_ulonglong = (c_sequence)dest0;
            }
            } else {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#else
        dest0 = (c_ulonglong *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
            const c_ulonglong *buf0;
            buf0 = (const c_ulonglong *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->seq_ulonglong = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
    }
    {
/* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 826 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        c_float *dest0;
        const ::pingpong::PP_bseq_msg::_seq_float_seq *src = &from->seq_float;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_float"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_float,10>",subtype0,10);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
        if(length0 > 10){
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_bseq_msg.seq_float' of type 'C_SEQUENCE<c_float,10>' is out of range.");
            result = V_COPYIN_RESULT_INVALID;
        } else {
            dest0 = (c_float *)c_newSequence_s(c_collectionType(type0),length0);
            if(dest0 != NULL) {
                /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
                const c_float *buf0;
                buf0 = (const c_float *)(*src).get_buffer();
                memcpy (dest0,buf0,length0* sizeof(*dest0));
                to->seq_float = (c_sequence)dest0;
            }
            } else {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#else
        dest0 = (c_float *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
            const c_float *buf0;
            buf0 = (const c_float *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->seq_float = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
    }
    {
/* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 826 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        c_double *dest0;
        const ::pingpong::PP_bseq_msg::_seq_double_seq *src = &from->seq_double;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_double"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_double,10>",subtype0,10);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
        if(length0 > 10){
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_bseq_msg.seq_double' of type 'C_SEQUENCE<c_double,10>' is out of range.");
            result = V_COPYIN_RESULT_INVALID;
        } else {
            dest0 = (c_double *)c_newSequence_s(c_collectionType(type0),length0);
            if(dest0 != NULL) {
                /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
                const c_double *buf0;
                buf0 = (const c_double *)(*src).get_buffer();
                memcpy (dest0,buf0,length0* sizeof(*dest0));
                to->seq_double = (c_sequence)dest0;
            }
            } else {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#else
        dest0 = (c_double *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
            const c_double *buf0;
            buf0 = (const c_double *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->seq_double = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
    }
    {
/* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 826 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        c_bool *dest0;
        const ::pingpong::PP_bseq_msg::_seq_boolean_seq *src = &from->seq_boolean;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_bool"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_bool,10>",subtype0,10);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
        if(length0 > 10){
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'pingpong::PP_bseq_msg.seq_boolean' of type 'C_SEQUENCE<c_bool,10>' is out of range.");
            result = V_COPYIN_RESULT_INVALID;
        } else {
            dest0 = (c_bool *)c_newSequence_s(c_collectionType(type0),length0);
            if(dest0 != NULL) {
                /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
                const c_bool *buf0;
                buf0 = (const c_bool *)(*src).get_buffer();
                memcpy (dest0,buf0,length0* sizeof(*dest0));
                to->seq_boolean = (c_sequence)dest0;
            }
            } else {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#else
        dest0 = (c_bool *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/tags/OSPL_V6_8_2-RC2/ubuntu1204-64/x86_64.linux-release-notest-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2025 */
            const c_bool *buf0;
            buf0 = (const c_bool *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->seq_boolean = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
    }
    return result;
}

v_copyin_result
__pingpong_PP_quit_msg__copyIn(
    c_base base,
    const struct ::pingpong::PP_quit_msg *from,
    struct _pingpong_PP_quit_msg *to)
{
    v_copyin_result result = V_COPYIN_RESULT_OK;
    (void) base;

    to->quit = (c_bool)from->quit;
    return result;
}

void
__pingpong_PP_min_msg__copyOut(
    const void *_from,
    void *_to)
{
    const struct _pingpong_PP_min_msg *from = (const struct _pingpong_PP_min_msg *)_from;
    struct ::pingpong::PP_min_msg *to = (struct ::pingpong::PP_min_msg *)_to;
    to->block = (::DDS::ULong)from->block;
    to->count = (::DDS::ULong)from->count;
}

void
__pingpong_seq_char__copyOut(
    const void *_from,
    void *_to)
{
    const _pingpong_seq_char *from = (const _pingpong_seq_char *)_from;
    ::pingpong::seq_char *to = (::pingpong::seq_char *)_to;
    long size0;
    const c_char *src0 = (const c_char *)(*from);

    size0 = c_arraySize(c_sequence(src0));
    (*to).length(size0);
    {
        c_char *buf0;
        buf0 = (c_char *)(*to).get_buffer();
        memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
    }
}

void
__pingpong_PP_seq_msg__copyOut(
    const void *_from,
    void *_to)
{
    const struct _pingpong_PP_seq_msg *from = (const struct _pingpong_PP_seq_msg *)_from;
    struct ::pingpong::PP_seq_msg *to = (struct ::pingpong::PP_seq_msg *)_to;
    to->block = (::DDS::ULong)from->block;
    to->count = (::DDS::ULong)from->count;
    {
        extern void __pingpong_seq_char__copyOut(const void *, void *);
        __pingpong_seq_char__copyOut((const void *)&from->payload, (void *)&to->payload);
    }
}

void
__pingpong_PP_string_msg__copyOut(
    const void *_from,
    void *_to)
{
    const struct _pingpong_PP_string_msg *from = (const struct _pingpong_PP_string_msg *)_from;
    struct ::pingpong::PP_string_msg *to = (struct ::pingpong::PP_string_msg *)_to;
    to->block = (::DDS::ULong)from->block;
    to->count = (::DDS::ULong)from->count;
    to->a_string = DDS::string_dup(from->a_string ? from->a_string : "");
}

void
__pingpong_PP_fixed_msg__copyOut(
    const void *_from,
    void *_to)
{
    const struct _pingpong_PP_fixed_msg *from = (const struct _pingpong_PP_fixed_msg *)_from;
    struct ::pingpong::PP_fixed_msg *to = (struct ::pingpong::PP_fixed_msg *)_to;
    to->block = (::DDS::ULong)from->block;
    to->count = (::DDS::ULong)from->count;
    to->a_char = (::DDS::Char)from->a_char;
    to->a_octet = (::DDS::Octet)from->a_octet;
    to->a_short = (::DDS::Short)from->a_short;
    to->a_ushort = (::DDS::UShort)from->a_ushort;
    to->a_long = (::DDS::Long)from->a_long;
    to->a_ulong = (::DDS::ULong)from->a_ulong;
    to->a_longlong = (::DDS::LongLong)from->a_longlong;
    to->a_ulonglong = (::DDS::ULongLong)from->a_ulonglong;
    to->a_float = (::DDS::Float)from->a_float;
    to->a_double = (::DDS::Double)from->a_double;
    to->a_boolean = (::DDS::Boolean)(from->a_boolean != 0);
    to->a_bstring = DDS::string_dup(from->a_bstring ? from->a_bstring : "");
}

void
__pingpong_PP_array_msg__copyOut(
    const void *_from,
    void *_to)
{
    const struct _pingpong_PP_array_msg *from = (const struct _pingpong_PP_array_msg *)_from;
    struct ::pingpong::PP_array_msg *to = (struct ::pingpong::PP_array_msg *)_to;
    to->block = (::DDS::ULong)from->block;
    to->count = (::DDS::ULong)from->count;
    {
        typedef c_char _DestType[10];
        const _DestType *src = &from->str_arr_char;

        memcpy ((void *)to->str_arr_char, src, sizeof (*src));
    }
    {
        typedef c_octet _DestType[10];
        const _DestType *src = &from->str_arr_octet;

        memcpy ((void *)to->str_arr_octet, src, sizeof (*src));
    }
    {
        typedef c_short _DestType[10];
        const _DestType *src = &from->str_arr_short;

        memcpy ((void *)to->str_arr_short, src, sizeof (*src));
    }
    {
        typedef c_ushort _DestType[10];
        const _DestType *src = &from->str_arr_ushort;

        memcpy ((void *)to->str_arr_ushort, src, sizeof (*src));
    }
    {
        typedef c_long _DestType[10];
        const _DestType *src = &from->str_arr_long;

        memcpy ((void *)to->str_arr_long, src, sizeof (*src));
    }
    {
        typedef c_ulong _DestType[10];
        const _DestType *src = &from->str_arr_ulong;

        memcpy ((void *)to->str_arr_ulong, src, sizeof (*src));
    }
    {
        typedef c_longlong _DestType[10];
        const _DestType *src = &from->str_arr_longlong;

        memcpy ((void *)to->str_arr_longlong, src, sizeof (*src));
    }
    {
        typedef c_ulonglong _DestType[10];
        const _DestType *src = &from->str_arr_ulonglong;

        memcpy ((void *)to->str_arr_ulonglong, src, sizeof (*src));
    }
    {
        typedef c_float _DestType[10];
        const _DestType *src = &from->str_arr_float;

        memcpy ((void *)to->str_arr_float, src, sizeof (*src));
    }
    {
        typedef c_double _DestType[10];
        const _DestType *src = &from->str_arr_double;

        memcpy ((void *)to->str_arr_double, src, sizeof (*src));
    }
    {
        typedef c_bool _DestType[11];
        const _DestType *src = &from->str_arr_boolean;

        memcpy ((void *)to->str_arr_boolean, src, sizeof (*src));
    }
}

void
__pingpong_PP_bseq_msg__copyOut(
    const void *_from,
    void *_to)
{
    const struct _pingpong_PP_bseq_msg *from = (const struct _pingpong_PP_bseq_msg *)_from;
    struct ::pingpong::PP_bseq_msg *to = (struct ::pingpong::PP_bseq_msg *)_to;
    to->block = (::DDS::ULong)from->block;
    to->count = (::DDS::ULong)from->count;
    {
        long size0;
        const c_char *src0 = (const c_char *)from->seq_char;
        ::pingpong::PP_bseq_msg::_seq_char_seq *dst = &to->seq_char;

        size0 = c_arraySize(c_sequence(from->seq_char));
        to->seq_char.length(size0);
        {
            c_char *buf0;
            buf0 = (c_char *)(*dst).get_buffer();
            memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        long size0;
        const c_octet *src0 = (const c_octet *)from->seq_octets;
        ::pingpong::PP_bseq_msg::_seq_octets_seq *dst = &to->seq_octets;

        size0 = c_arraySize(c_sequence(from->seq_octets));
        to->seq_octets.length(size0);
        {
            c_octet *buf0;
            buf0 = (c_octet *)(*dst).get_buffer();
            memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        long size0;
        const c_short *src0 = (const c_short *)from->seq_short;
        ::pingpong::PP_bseq_msg::_seq_short_seq *dst = &to->seq_short;

        size0 = c_arraySize(c_sequence(from->seq_short));
        to->seq_short.length(size0);
        {
            c_short *buf0;
            buf0 = (c_short *)(*dst).get_buffer();
            memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        long size0;
        const c_ushort *src0 = (const c_ushort *)from->seq_ushort;
        ::pingpong::PP_bseq_msg::_seq_ushort_seq *dst = &to->seq_ushort;

        size0 = c_arraySize(c_sequence(from->seq_ushort));
        to->seq_ushort.length(size0);
        {
            c_ushort *buf0;
            buf0 = (c_ushort *)(*dst).get_buffer();
            memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        long size0;
        const c_long *src0 = (const c_long *)from->seq_long;
        ::pingpong::PP_bseq_msg::_seq_long_seq *dst = &to->seq_long;

        size0 = c_arraySize(c_sequence(from->seq_long));
        to->seq_long.length(size0);
        {
            c_long *buf0;
            buf0 = (c_long *)(*dst).get_buffer();
            memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        long size0;
        const c_ulong *src0 = (const c_ulong *)from->seq_ulong;
        ::pingpong::PP_bseq_msg::_seq_ulong_seq *dst = &to->seq_ulong;

        size0 = c_arraySize(c_sequence(from->seq_ulong));
        to->seq_ulong.length(size0);
        {
            c_ulong *buf0;
            buf0 = (c_ulong *)(*dst).get_buffer();
            memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        long size0;
        const c_longlong *src0 = (const c_longlong *)from->seq_longlong;
        ::pingpong::PP_bseq_msg::_seq_longlong_seq *dst = &to->seq_longlong;

        size0 = c_arraySize(c_sequence(from->seq_longlong));
        to->seq_longlong.length(size0);
        {
            c_longlong *buf0;
            buf0 = (c_longlong *)(*dst).get_buffer();
            memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        long size0;
        const c_ulonglong *src0 = (const c_ulonglong *)from->seq_ulonglong;
        ::pingpong::PP_bseq_msg::_seq_ulonglong_seq *dst = &to->seq_ulonglong;

        size0 = c_arraySize(c_sequence(from->seq_ulonglong));
        to->seq_ulonglong.length(size0);
        {
            c_ulonglong *buf0;
            buf0 = (c_ulonglong *)(*dst).get_buffer();
            memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        long size0;
        const c_float *src0 = (const c_float *)from->seq_float;
        ::pingpong::PP_bseq_msg::_seq_float_seq *dst = &to->seq_float;

        size0 = c_arraySize(c_sequence(from->seq_float));
        to->seq_float.length(size0);
        {
            c_float *buf0;
            buf0 = (c_float *)(*dst).get_buffer();
            memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        long size0;
        const c_double *src0 = (const c_double *)from->seq_double;
        ::pingpong::PP_bseq_msg::_seq_double_seq *dst = &to->seq_double;

        size0 = c_arraySize(c_sequence(from->seq_double));
        to->seq_double.length(size0);
        {
            c_double *buf0;
            buf0 = (c_double *)(*dst).get_buffer();
            memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        long size0;
        const c_bool *src0 = (const c_bool *)from->seq_boolean;
        ::pingpong::PP_bseq_msg::_seq_boolean_seq *dst = &to->seq_boolean;

        size0 = c_arraySize(c_sequence(from->seq_boolean));
        to->seq_boolean.length(size0);
        {
            c_bool *buf0;
            buf0 = (c_bool *)(*dst).get_buffer();
            memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
        }
    }
}

void
__pingpong_PP_quit_msg__copyOut(
    const void *_from,
    void *_to)
{
    const struct _pingpong_PP_quit_msg *from = (const struct _pingpong_PP_quit_msg *)_from;
    struct ::pingpong::PP_quit_msg *to = (struct ::pingpong::PP_quit_msg *)_to;
    to->quit = (::DDS::Boolean)(from->quit != 0);
}


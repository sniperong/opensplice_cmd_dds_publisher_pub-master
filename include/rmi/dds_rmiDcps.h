//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: dds_rmiDcps.h
//  Source: dds_rmiDcps.idl
//  Generated: Thu Jul 27 00:53:34 2017
//  OpenSplice 6.8.2
//  
//******************************************************************
#ifndef _DDS_RMIDCPS_H_
#define _DDS_RMIDCPS_H_

#include "sacpp_mapping.h"
#include "dds_rmi.h"
#include "dds_dcps.h"


namespace DDS_RMI
{

   class IdentificationTypeSupportInterface;

   typedef IdentificationTypeSupportInterface * IdentificationTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < IdentificationTypeSupportInterface> IdentificationTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < IdentificationTypeSupportInterface> IdentificationTypeSupportInterface_out;


   class IdentificationDataWriter;

   typedef IdentificationDataWriter * IdentificationDataWriter_ptr;
   typedef DDS_DCPSInterface_var < IdentificationDataWriter> IdentificationDataWriter_var;
   typedef DDS_DCPSInterface_out < IdentificationDataWriter> IdentificationDataWriter_out;


   class IdentificationDataReader;

   typedef IdentificationDataReader * IdentificationDataReader_ptr;
   typedef DDS_DCPSInterface_var < IdentificationDataReader> IdentificationDataReader_var;
   typedef DDS_DCPSInterface_out < IdentificationDataReader> IdentificationDataReader_out;


   class IdentificationDataReaderView;

   typedef IdentificationDataReaderView * IdentificationDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < IdentificationDataReaderView> IdentificationDataReaderView_var;
   typedef DDS_DCPSInterface_out < IdentificationDataReaderView> IdentificationDataReaderView_out;


   class DefinitionTypeSupportInterface;

   typedef DefinitionTypeSupportInterface * DefinitionTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < DefinitionTypeSupportInterface> DefinitionTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < DefinitionTypeSupportInterface> DefinitionTypeSupportInterface_out;


   class DefinitionDataWriter;

   typedef DefinitionDataWriter * DefinitionDataWriter_ptr;
   typedef DDS_DCPSInterface_var < DefinitionDataWriter> DefinitionDataWriter_var;
   typedef DDS_DCPSInterface_out < DefinitionDataWriter> DefinitionDataWriter_out;


   class DefinitionDataReader;

   typedef DefinitionDataReader * DefinitionDataReader_ptr;
   typedef DDS_DCPSInterface_var < DefinitionDataReader> DefinitionDataReader_var;
   typedef DDS_DCPSInterface_out < DefinitionDataReader> DefinitionDataReader_out;


   class DefinitionDataReaderView;

   typedef DefinitionDataReaderView * DefinitionDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < DefinitionDataReaderView> DefinitionDataReaderView_var;
   typedef DDS_DCPSInterface_out < DefinitionDataReaderView> DefinitionDataReaderView_out;

   struct IdentificationSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Identification, struct IdentificationSeq_uniq_> IdentificationSeq;
   typedef DDS_DCPSSequence_var < IdentificationSeq> IdentificationSeq_var;
   typedef DDS_DCPSSequence_out < IdentificationSeq> IdentificationSeq_out;
   class IdentificationTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef IdentificationTypeSupportInterface_ptr _ptr_type;
      typedef IdentificationTypeSupportInterface_var _var_type;

      static IdentificationTypeSupportInterface_ptr _duplicate (IdentificationTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static IdentificationTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static IdentificationTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static IdentificationTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      IdentificationTypeSupportInterface_ptr _this () { return this; }


   protected:
      IdentificationTypeSupportInterface () {};
      ~IdentificationTypeSupportInterface () {};
   private:
      IdentificationTypeSupportInterface (const IdentificationTypeSupportInterface &);
      IdentificationTypeSupportInterface & operator = (const IdentificationTypeSupportInterface &);
   };

   class IdentificationDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef IdentificationDataWriter_ptr _ptr_type;
      typedef IdentificationDataWriter_var _var_type;

      static IdentificationDataWriter_ptr _duplicate (IdentificationDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static IdentificationDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static IdentificationDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static IdentificationDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      IdentificationDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Identification& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Identification& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Identification& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Identification& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Identification& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Identification& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Identification& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Identification& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Identification& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Identification& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Identification& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Identification& instance_data) = 0;

   protected:
      IdentificationDataWriter () {};
      ~IdentificationDataWriter () {};
   private:
      IdentificationDataWriter (const IdentificationDataWriter &);
      IdentificationDataWriter & operator = (const IdentificationDataWriter &);
   };

   class IdentificationDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef IdentificationDataReader_ptr _ptr_type;
      typedef IdentificationDataReader_var _var_type;

      static IdentificationDataReader_ptr _duplicate (IdentificationDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static IdentificationDataReader_ptr _narrow (DDS::Object_ptr obj);
      static IdentificationDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static IdentificationDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      IdentificationDataReader_ptr _this () { return this; }

      virtual DDS::Long read (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Identification& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Identification& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Identification& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Identification& instance) = 0;

   protected:
      IdentificationDataReader () {};
      ~IdentificationDataReader () {};
   private:
      IdentificationDataReader (const IdentificationDataReader &);
      IdentificationDataReader & operator = (const IdentificationDataReader &);
   };

   class IdentificationDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef IdentificationDataReaderView_ptr _ptr_type;
      typedef IdentificationDataReaderView_var _var_type;

      static IdentificationDataReaderView_ptr _duplicate (IdentificationDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static IdentificationDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static IdentificationDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static IdentificationDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      IdentificationDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Identification& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Identification& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (IdentificationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Identification& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Identification& instance) = 0;

   protected:
      IdentificationDataReaderView () {};
      ~IdentificationDataReaderView () {};
   private:
      IdentificationDataReaderView (const IdentificationDataReaderView &);
      IdentificationDataReaderView & operator = (const IdentificationDataReaderView &);
   };

   struct DefinitionSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Definition, struct DefinitionSeq_uniq_> DefinitionSeq;
   typedef DDS_DCPSSequence_var < DefinitionSeq> DefinitionSeq_var;
   typedef DDS_DCPSSequence_out < DefinitionSeq> DefinitionSeq_out;
   class DefinitionTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef DefinitionTypeSupportInterface_ptr _ptr_type;
      typedef DefinitionTypeSupportInterface_var _var_type;

      static DefinitionTypeSupportInterface_ptr _duplicate (DefinitionTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DefinitionTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static DefinitionTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DefinitionTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      DefinitionTypeSupportInterface_ptr _this () { return this; }


   protected:
      DefinitionTypeSupportInterface () {};
      ~DefinitionTypeSupportInterface () {};
   private:
      DefinitionTypeSupportInterface (const DefinitionTypeSupportInterface &);
      DefinitionTypeSupportInterface & operator = (const DefinitionTypeSupportInterface &);
   };

   class DefinitionDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef DefinitionDataWriter_ptr _ptr_type;
      typedef DefinitionDataWriter_var _var_type;

      static DefinitionDataWriter_ptr _duplicate (DefinitionDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DefinitionDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static DefinitionDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DefinitionDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      DefinitionDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Definition& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Definition& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Definition& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Definition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Definition& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Definition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Definition& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Definition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Definition& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Definition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Definition& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Definition& instance_data) = 0;

   protected:
      DefinitionDataWriter () {};
      ~DefinitionDataWriter () {};
   private:
      DefinitionDataWriter (const DefinitionDataWriter &);
      DefinitionDataWriter & operator = (const DefinitionDataWriter &);
   };

   class DefinitionDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef DefinitionDataReader_ptr _ptr_type;
      typedef DefinitionDataReader_var _var_type;

      static DefinitionDataReader_ptr _duplicate (DefinitionDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DefinitionDataReader_ptr _narrow (DDS::Object_ptr obj);
      static DefinitionDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DefinitionDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      DefinitionDataReader_ptr _this () { return this; }

      virtual DDS::Long read (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Definition& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Definition& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Definition& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Definition& instance) = 0;

   protected:
      DefinitionDataReader () {};
      ~DefinitionDataReader () {};
   private:
      DefinitionDataReader (const DefinitionDataReader &);
      DefinitionDataReader & operator = (const DefinitionDataReader &);
   };

   class DefinitionDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef DefinitionDataReaderView_ptr _ptr_type;
      typedef DefinitionDataReaderView_var _var_type;

      static DefinitionDataReaderView_ptr _duplicate (DefinitionDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DefinitionDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static DefinitionDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DefinitionDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      DefinitionDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Definition& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Definition& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (DefinitionSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Definition& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Definition& instance) = 0;

   protected:
      DefinitionDataReaderView () {};
      ~DefinitionDataReaderView () {};
   private:
      DefinitionDataReaderView (const DefinitionDataReaderView &);
      DefinitionDataReaderView & operator = (const DefinitionDataReaderView &);
   };

}




#endif
